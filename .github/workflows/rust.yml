name: obct

permissions:
  packages: write
  contents: write

on:
  push:
    branches:
      - '**'
  pull_request:


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - run: rustup component add clippy
    - run: rustup +nightly component add miri
    - name: Build
      run: cargo build --verbose
    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -A dead-code -D warnings -W clippy::pedantic
    - name: Miri
      run: cargo +nightly miri test
    - name: Run tests
      run: cargo test --verbose
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - run: rustup component add llvm-tools-preview
      - run: cargo install cargo-binutils
      - name: Run tests
        run: RUSTFLAGS="-C instrument-coverage" cargo test --tests
      - name: Merge profdata
        run: cargo profdata -- merge -sparse default_*.profraw -o merged.profdata
      - name: Generate report
        run: |
          cargo cov -- export \
            $( \
              for file in \
                $( \
                  RUSTFLAGS="-C instrument-coverage" \
                  RUSTDOCFLAGS="-C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins" \
                    cargo test --no-run --message-format=json \
                      | jq -r "select(.profile.test == true) | .filenames[]" \
                      | grep -v dSYM - \
                ) \
                target/debug/doctestbins/*/rust_out; \
              do \
                [[ -x $file ]] && printf "%s %s " -object $file; \
              done \
            ) \
          --instr-profile=merged.profdata --ignore-filename-regex=/.cargo/registry --ignore-filename-regex=/rust --format=lcov > coverage.txt
      - run: cat coverage.txt
      - name: Upload report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt
          fail_ci_if_error: true
          verbose: true
  push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@master
      - name: Env variable assignment
        run: echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker images
        uses: docker/build-push-action@master
        with:
          file: Dockerfile
          context: .
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}:latest
  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Env variable assignment
        run: echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: copy files to target server via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./compose.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@master
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./compose.yml pull
            docker compose -f ./compose.yml up
